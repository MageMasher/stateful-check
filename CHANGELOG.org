* 0.3.1

- ~:model/args~ now coerces the returned values into a generator.
  Coercion works like the following:
  + if it's a generator: return it
  + if it's a sequential collection: coerce each element into a
    generator, then use ~gen/tuple~ to combine them
  + if it's a map: coerce each value into a generator, then use
    ~gen/hash-map~ to combine each key/value-gen pair
  + anything else: return it using ~gen/return~

- ~:model/generate-command~ now have a default implementation. If you
  don't provide an implementation then it will select a command at
  random (effectively: ~(gen/elements (:commands spec))~).

- If a value in the ~:command~ map is a var then dereference it (to
  facilitate breaking up specs a bit more).

* 0.3.0

- *Breaking!* Add ~next-state~ to the ~:real/postcondition~ function
  arguments in commands.

  Any command preconditions will need to be modified to take an extra
  argument.
  #+BEGIN_SRC clojure
    (fn [state args result]
      arbitrary-logic-for-postcondition)
    ;; needs to change to
    (fn [prev-state next-state args result]
      arbitrary-logic-for-postcondition)
  #+END_SRC

- *Breaking!* Change ~reality-matches-model?~ to be called
  ~reality-matches-model~ (it's not a predicate, so it shouldn't have
  a ~?~ in its name). This function is now deprecated, though, in
  favour of using ~deftest~ with our custom ~is~ form (see the next point).

- Add support for a custom test.check ~is~ form:
  #+BEGIN_SRC clojure
    (is (specification-correct? some-spec))
    (is (specification-correct? some-spec {:num-tests 1000, :max-size 10, :seed 123456789}))
  #+END_SRC

- Make the command generator use the same size for all commands.

- Rewrite the command verifier/runner to make it a whole lot cleaner
  (including breaking out extra namespaces).

- Upgrade to test.check 0.7.0.

- Tweak the format of ~print-test-results~.

* 0.2.0

- Add namespaces to some keys which didn't have them before
  - ~:generate-command~ is now ~:model/generate-command~
  - ~:setup~ is now ~:real/setup~
  - ~:cleanup~ is now ~:real/cleanup~

- Add some more keys to the top-level spec object:
  - ~:model/initial-state~, ~:real/initial-state~, ~:initial-state~
    for setting the initial state of the system
  - ~:real/postcondition~ on the top-level spec, to check for global
    invariants

- Make symbolic values implement ~ILookup~ (to work with ~get~)

- Clean up exception handling during command runs

* 0.1.0

Initial release.
