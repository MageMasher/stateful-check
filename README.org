#+TITLE: stateful-check

A [[http://clojure.org][Clojure]] library designed to help with testing stateful systems with
[[https://github.com/clojure/test.check/][test.check]].

#+BEGIN_HTML
<a href="http://clojars.org/org.clojars.czan/stateful-check">
  <img src="http://clojars.org/org.clojars.czan/stateful-check/latest-version.svg"
       alt="Clojars Project">
</a>
#+END_HTML

* Example

As an example, let's test Java's ~java.util.TreeMap~ implementation. To start off with we'll need to require some namespaces that we'll need later:
#+BEGIN_SRC clojure :results silent
  (require [clojure.test :refer [is]]
           [clojure.test.check.generators :as gen]
           [stateful-check.core :refer [specification-correct?]])
#+END_SRC

We'll be testing a ~TreeMap~, so let's allocate one in a global variable that we'll access during our tests.
#+BEGIN_SRC clojure :results silent
  (def system-under-test (java.util.TreeMap.))
#+END_SRC

** Commands

#+BEGIN_SRC clojure :results silent
  (def put-command
    {:args (fn [state] [(gen/elements test-keys) gen/int])
     :command #(.put system-under-test %1 %2)
     :next-state (fn [state [k v] _]
                   (assoc state k v))})
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def get-command
    {:requires (fn [state] (seq state))
     :args (fn [state] [(gen/elements test-keys)])
     :command #(.get system-under-test %1)
     :postcondition (fn [prev-state _ [k] val]
                      (= (get prev-state k) val))})
#+END_SRC

** Specification

#+BEGIN_SRC clojure :results silent
  (def java-map-specification
    {:commands {:put #'put-command
                :get #'get-command}
     :setup #(.clear system-under-test)})
#+END_SRC

** Running

#+BEGIN_SRC clojure
  (is (specification-correct? java-map-specification))
#+END_SRC

#+BEGIN_SRC clojure
  (is (not (specification-correct? java-map-specification
                                   {:gen {:threads 2
                                          :max-length 4}
                                    :run {:max-tries 100}})))
#+END_SRC

As an example, let's implement a simple mutable queue and a
specification to test it.

To begin with, let's pull in the dependencies we'll need later.
#+BEGIN_SRC clojure :results silent :session example
  (ns stateful-check.example
    (:require [clojure.test :refer [is]]
              [clojure.test.check.generators :as gen]
              [stateful-check.core :refer [specification-correct?]]))
#+END_SRC

* Specifications

For a detailed description of how a ~stateful-check~ specification has
to be structured, see [[file:doc/specification.org][the specification document]].

* Related work

- [[https://github.com/clojure/test.check/][test.check]] (generative testing for Clojure)
- [[http://www.quviq.com/index.html][QuviQ Quickcheck]] (commercial generative testing for Erlang)
- [[http://proper.softlab.ntua.gr/index.html][PropEr]] (open source generative testing for Erlang)

* Future work

- hook into JVM scheduler/debugger to control scheduling to make tests reproducible

* License

Copyright Â© 2018 Carlo Zancanaro

Distributed under the MIT Licence.
