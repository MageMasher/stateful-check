#+TITLE: stateful-check

A [[http://clojure.org][Clojure]] library designed to help with testing stateful systems with
[[https://github.com/clojure/test.check/][test.check]].

* Example

As an example, let's test a mutable queue (a ~PersistentQueue~ in an
atom). Our queue will have three operations: ~new~, ~push~ and
~pop~. Before we get started, though, let's import some things which
we'll need later.

#+BEGIN_SRC clojure :results silent :exports code
  (require '[clojure.test.check.generators :as gen]
           '[clojure.test.check :refer [quick-check]]
           '[stateful-check.core :refer [reality-matches-model? print-test-results]])

#+END_SRC

** Defining

*** ~new-queue~

The implementation for the ~new-queue~ function is quite simple:

#+BEGIN_SRC clojure :results silent :exports code
  (defn new-queue []
    (atom clojure.lang.PersistentQueue/EMPTY))
#+END_SRC

In order to use it with ~stateful-check~ we also need to model its
abstract semantics:

#+BEGIN_SRC clojure :results silent :exports code
  (def new-queue-specification
    {:next-state (fn [state _ result]
                   {:queue result, :elements []})
     :real/command #'new-queue})
#+END_SRC

This specification denotes that the new queue starts off empty
(~:elements~ is empty), and tracks the newly-created queue in the
~:queue~ key of ~state~ (so we can perform further operations on it
later).

*** ~push-queue~

Similarly, ~push-queue~ is fairly simple to implement.

#+BEGIN_SRC clojure :results silent :exports code
  (defn push-queue [queue val]
    (swap! queue conj val)
    nil)
#+END_SRC

Then its abstract semantics:

#+BEGIN_SRC clojure :results silent :exports code
  (def push-queue-specification
    {:model/args (fn [state]
                   (gen/tuple (gen/return (:queue state))
                              gen/nat))
     :model/precondition (fn [state _] (:queue state))
     :real/command #'push-queue
     :next-state (fn [state [_ val] _]
                   (assoc state
                     :elements (conj (:elements state) val)))})
#+END_SRC

This specification has two additional elements over
~new-queue-specification~:

- ~:model/args~ specifies a function which will provide a generator to
  generate arguments for ~push-queue~. In this case we will attempt to
  push a natural number (~gen/nat~) into the queue under test (which
  we have stored in ~(:queue state)~)

- ~:model/precondition~ specifies whether this command is valid to
  run. By inspecting ~state~ and the generated arguments we may be
  able to determine that this is an invalid call. In this case: if we
  have not allocated a queue (using ~new-queue~) then it is invalid to
  try to push.

In addition to these, we can see that ~:next-state~ simply adds the
command to the end of the ~:elements~ vector in the ~state~ map.

*** ~pop-queue~

Lastly, ~pop-queue~:

#+BEGIN_SRC clojure :results silent :exports code
  (defn pop-queue [queue]
    (let [val (peek @queue)]
      (swap! queue pop)))

  (def pop-queue-specification
    {:model/args (fn [state]
                   (gen/return [(:queue state)]))
     :model/precondition (fn [state _]
                           (not (empty? (:elements state))))
     :real/command #'pop-queue
     :next-state (fn [state _ _]
                   (assoc state
                     :elements (vec (next (:elements state)))))
     :real/postcondition (fn [state _ val]
                           (= val (first (:elements state))))})
#+END_SRC

This specification has one more element from ~push-queue-specification~:

- ~:real/postcondition~ determines whether the result of performing
  this action correctly matches the expectation (from the abstract
  state). In our case: we expect the value returned by ~pop-queue~ to
  be the first value in the ~:elements~ vector.

** Running

Now we want to run our specification. In order to do this we first
need to assemble each of our command specifications into a full model
specification.

#+BEGIN_SRC clojure :results silent :exports code
  (def queue-spec
    {:commands {:new new-queue-specification
                :push push-queue-specification
                :pop pop-queue-specification}
     :generate-command (fn [state]
                         (if (nil? state)
                           (gen/return :new)
                           (gen/elements [:push :pop])))})
#+END_SRC

The ~:commands~ key just contains a map of each command spec we are
using for this model. ~:generate-command~ is a function from the
abstract state to a generator which will generate a new command.

Let's see what happens when we run this specification:

#+BEGIN_SRC clojure :results result
  (quick-check 100 (reality-matches-model? queue-spec) :seed 1417059242645)
  ;; {:result false, :seed 1417059242645, :failing-size 5, :num-tests 6, :fail [[[#<0> (:new)] [#<1> (:push #<0> 4)] [#<2> (:push #<0> 2)] [#<3> (:pop #<0>)]]], :shrunk {:total-nodes-visited 5, :depth 1, :result false, :smallest [[[#<0> (:new)] [#<1> (:push #<0> 4)] [#<3> (:pop #<0>)]]]}}
#+END_SRC

Whoops! It failed! We must have a bug somewhere. Let's see if we can see that output in a nicer form.

#+BEGIN_SRC clojure :results output
  (print-test-results queue-spec (quick-check 100 (reality-matches-model? queue-spec) :seed 1417059242645))
  ;; Failing test case:
  ;;    #<0> = (:new)     ;=> #<Atom@194d35d: #<PersistentQueue clojure.lang.PersistentQueue@1>>
  ;;    #<1> = (:push #<0> 4)     ;=> nil
  ;;    #<2> = (:push #<0> 2)     ;=> nil
  ;;    #<3> = (:pop #<0>)        ;=> #<PersistentQueue clojure.lang.PersistentQueue@21>
  ;;    !! Postcondition failed !!
  ;; Shrunk:
  ;;    #<0> = (:new)     ;=> #<Atom@51c07f7a: #<PersistentQueue clojure.lang.PersistentQueue@1>>
  ;;    #<1> = (:push #<0> 4)     ;=> nil
  ;;    #<3> = (:pop #<0>)        ;=> #<PersistentQueue clojure.lang.PersistentQueue@1>
  ;;    !! Postcondition failed !!
#+END_SRC

Okay, we seem to have an error when we create a queue, then push a
value into it, then pop the value back out. So it could be a problem
with any of our operations.

Looking at the return value of the ~:pop~ step, though, we can see
that it's returning the wrong thing! It's returning us a queue, not a
value from the queue. We have a bug!

So, let's fix our error.

#+BEGIN_SRC clojure :results silent :exports code
  (defn pop-queue [queue]
    (let [val (peek @queue)]
      (swap! queue pop)
      val))
#+END_SRC

Now let's try running our tests again.

#+BEGIN_SRC clojure :results result
  (quick-check 100 (reality-matches-model? queue-spec) :seed 1417059242645)
  ;; {:result true, :num-tests 100, :seed 1417059242645}
#+END_SRC

Success!

* Specifications

TODO: talk more about specifications here

* License

Copyright Â© 2014 Carlo Zancanaro

Distributed under the Eclipse Public License either version 1.0 or (at
your option) any later version.
