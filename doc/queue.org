#+TITLE: A simple queue example

#+PROPERTY: header-args:clojure :session example :results silent

As an example, let's test a mutable queue (a ~PersistentQueue~ in an
atom). Our queue will have three operations: ~new~, ~push~ and
~pop~. Before we get started, though, let's import some things which
we'll need later.

#+BEGIN_SRC clojure
  (ns stateful-check.example
    (:require [clojure.test :refer [is]]
              [clojure.test.check.generators :as gen]
              [stateful-check.core :refer [specification-correct?]]))
#+END_SRC

* Defining

** ~new-queue~

The implementation for the ~new-queue~ function is quite simple:

#+BEGIN_SRC clojure
  (defn new-queue [] (atom clojure.lang.PersistentQueue/EMPTY))
#+END_SRC

In order to use it with ~stateful-check~ we also need to model its
semantics:

#+BEGIN_SRC clojure
  (def new-queue-specification
    {:model/requires (fn [state] (nil? state))
     :real/command #'new-queue
     :next-state (fn [state _ result] {:queue result, :elements []})})
#+END_SRC

This specification contains three elements:

- ~:model/requires~ specifies that this command is only valid if the
  state of the system is ~nil~ (which in this case means: nothing has
  been done to the system yet)

- ~:real/command~ specifies what to do to actually run this command.
  For this command we want to allocate a new queue.

- ~:next-state~ denotes the effect that running this command will have
  on the state of the system. In this case running the ~new-queue~
  function will initialise the state. ~:elements~ is set to the empty
  vector because our queue starts off empty. ~:queue~ is set to the
  result of calling the ~:real/command~ function to store it for later
  operations.

In this instance the ~:next-state~ function is called when performing
both the abstract and the real evaluation. This means that ~:result~
could be a symbolic value, and thus cannot be operated on directly in
~:next-state~. When a symbolic value is used as an argument to a later
command, however, it will be replaced by its corresponding concrete
value (as can be seen below, where ~:queue~ is used as an argument to
~push-queue~ and ~pop-queue~).

** ~push-queue~

Similarly, ~push-queue~ is fairly simple to implement.

#+BEGIN_SRC clojure
  (defn push-queue [queue val]
    (swap! queue conj val)
    nil)
#+END_SRC

Then its semantics:

#+BEGIN_SRC clojure
  (def push-queue-specification
    {:model/requires (fn [state] state)
     :model/args (fn [state] [(:queue state) gen/nat])
     :real/command #'push-queue
     :next-state (fn [state [_ val] _] (update-in state [:elements] conj val))})
#+END_SRC

This specification has one additional element over
~new-queue-specification~:

- ~:model/args~ specifies a function which will provide a generator to
  generate arguments for ~push-queue~. What we pass is converted into
  a generator where possible. In this case we are returning the queue
  under test (~(:queue state)~) as well as a generated natural number
  (~gen/nat~).

In addition to this, we can see that ~:model/requires~ merely requires
that there be something truthy in the state, and ~:next-state~ simply
adds the command to the end of the ~:elements~ vector in the ~state~
map.

** ~pop-queue~

Lastly, ~pop-queue~:

#+BEGIN_SRC clojure
  (defn pop-queue [queue]
    (let [val (peek @queue)]
      (swap! queue pop)))
#+END_SRC

#+BEGIN_SRC clojure
  (def pop-queue-specification
    {:model/requires (fn [state] (seq (:elements state)))
     :model/args (fn [state] [(:queue state)])
     :real/command #'pop-queue
     :next-state (fn [state [queue] _] (update-in state [:elements] (comp vec next)))
     :real/postcondition (fn [state _ [_] val] (= (first (:elements state)) val))})
#+END_SRC

This specification has one more element from ~push-queue-specification~:

- ~:real/postcondition~ determines whether the result of performing
  this action correctly matches the expectation (from the abstract
  state). In our case: we expect the value returned by ~pop-queue~ to
  be the first value in the ~:elements~ vector.

* Running

Now we want to run our specification. In order to do this we first
need to assemble each of our command specifications into a full model
specification.

#+BEGIN_SRC clojure
  (def queue-spec
    {:commands {:new #'new-queue-specification
                :push #'push-queue-specification
                :pop #'pop-queue-specification}})
#+END_SRC

The ~:commands~ key just contains a map of each command spec we are
using for this model. ~:model/generate-command~ is a function from the
abstract state to a generator which will generate a new command.

Let's see what happens when we run this specification:

#+BEGIN_SRC clojure :results replace output
  (is (specification-correct? queue-spec {:seed 1438362541481}))
  ;;
  ;; FAIL in clojure.lang.PersistentList$EmptyList@1 (form-init3962045565695936929.clj:1)
  ;;    #<0> = (:new)     => #<Atom@766af535: #<PersistentQueue clojure.lang.PersistentQueue@1>>
  ;;    #<2> = (:push #<0> 0)     => nil
  ;;    #<3> = (:pop #<0>)        => #<PersistentQueue clojure.lang.PersistentQueue@1>
  ;; Error while checking postcondition
  ;; Seed:  1438362541481
  ;; Visited:  11
  ;;
  ;; expected: :pass
  ;;   actual: :fail
#+END_SRC

Whoops! It failed! We must have a bug somewhere.

Okay, we seem to have an error when we create a queue, then push a
value into it, then pop the value back out. So it could be a problem
with any of our operations.

Looking at the return value of the ~:pop~ step, though, we can see
that it's returning the wrong thing! It's returning us a queue, not a
value from the queue. We have a bug!

So, let's fix our error.

#+BEGIN_SRC clojure
  (defn pop-queue [queue]
    (let [val (peek @queue)]
      (swap! queue pop)
      val))
#+END_SRC

Now let's try running our tests again.

#+BEGIN_SRC clojure :results replace output
  (is (specification-correct? queue-spec))
#+END_SRC

No output? That means the test passed! Success!

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
